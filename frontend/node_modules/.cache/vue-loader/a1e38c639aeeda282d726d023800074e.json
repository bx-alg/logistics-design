{"remainingRequest":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bx/logistics-design/frontend/src/views/device/monitor/agv.vue?vue&type=template&id=f35fb988&scoped=true","dependencies":[{"path":"/Users/bx/logistics-design/frontend/src/views/device/monitor/agv.vue","mtime":1748579816245},{"path":"/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1747185535160},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1747185534147},{"path":"/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1747185535160},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js","mtime":1747185534034}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}