{"remainingRequest":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bx/logistics-design/frontend/src/views/order/create.vue?vue&type=style&index=0&id=370fbd77&scoped=true&lang=css","dependencies":[{"path":"/Users/bx/logistics-design/frontend/src/views/order/create.vue","mtime":1747832187903},{"path":"/Users/bx/logistics-design/frontend/node_modules/css-loader/dist/cjs.js","mtime":1747185535288},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1747185534140},{"path":"/Users/bx/logistics-design/frontend/node_modules/postcss-loader/src/index.js","mtime":1747185535100},{"path":"/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1747185535160},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js","mtime":1747185534034}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5kZXRhaWwtaGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBhbGlnbi1pdGVtczogY2VudGVyOwogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0KLm9wZXJhdGlvbi1ncm91cCB7CiAgZGlzcGxheTogZmxleDsKICBnYXA6IDEwcHg7Cn0KLm9yZGVyLXN0YXR1cyB7CiAgbWFyZ2luLWJvdHRvbTogMzBweDsKfQoub3JkZXItZm9vdGVyIHsKICBtYXJnaW4tdG9wOiAyMHB4OwogIHRleHQtYWxpZ246IHJpZ2h0OwogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0KLm9yZGVyLXRvdGFsIHsKICBmb250LXNpemU6IDE2cHg7Cn0KLmNhcmQtaGVhZGVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsKICBhbGlnbi1pdGVtczogY2VudGVyOwp9Ci5vcmRlci10b3RhbCB7CiAgdGV4dC1hbGlnbjogcmlnaHQ7CiAgbWFyZ2luLXRvcDogMjBweDsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5mb3JtLWZvb3RlciB7CiAgbWFyZ2luLXRvcDogMzBweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KQG1lZGlhIHByaW50IHsKICAuZGV0YWlsLWhlYWRlciwgLmZvcm0tZm9vdGVyLCAuZWwtdGFibGVfX2V4cGFuZC1pY29uIHsKICAgIGRpc3BsYXk6IG5vbmU7CiAgfQp9Cg=="},{"version":3,"sources":["create.vue"],"names":[],"mappings":";AAkbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"create.vue","sourceRoot":"src/views/order","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"detail-header\">\n      <el-page-header @back=\"goBack\" :content=\"title\" />\n      <div class=\"operation-group\" v-if=\"!isCreating\">\n        <el-button type=\"primary\" size=\"small\" @click=\"handlePrint\" icon=\"el-icon-printer\">打印</el-button>\n        <el-button type=\"success\" size=\"small\" @click=\"handleNextStatus\" :disabled=\"!canChangeStatus\">\n          {{ nextStatusLabel }}\n        </el-button>\n        <el-button type=\"danger\" size=\"small\" @click=\"handleCancel\" :disabled=\"orderForm.status === 4 || orderForm.status === 5\">取消订单</el-button>\n      </div>\n    </div>\n\n    <div class=\"order-status\" v-if=\"!isCreating\">\n      <el-steps :active=\"orderForm.status\" finish-status=\"success\" simple>\n        <el-step v-for=\"status in orderStatusList\" \n                 :key=\"status.code\" \n                 :title=\"status.name\">\n        </el-step>\n      </el-steps>\n    </div>\n\n    <el-card>\n      <div slot=\"header\">\n        <span>创建订单</span>\n        </div>\n      \n      <el-form ref=\"orderForm\" :model=\"orderForm\" :rules=\"rules\" label-width=\"120px\">\n        <!-- 订单基本信息 -->\n        <el-divider content-position=\"left\">基本信息</el-divider>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <el-form-item label=\"客户\" prop=\"customerId\">\n              <el-select v-model=\"orderForm.customerId\" placeholder=\"请选择客户\" style=\"width:100%\" @change=\"handleCustomerChange\">\n                <el-option\n                  v-for=\"item in customerOptions\"\n                  :key=\"item.id\"\n                  :label=\"item.customerName\"\n                  :value=\"item.id\">\n                </el-option>\n              </el-select>\n            </el-form-item>\n          </el-col>\n          \n          <el-col :span=\"12\">\n            <el-form-item label=\"预计交付日期\" prop=\"expectedDeliveryDate\">\n              <el-date-picker\n                v-model=\"orderForm.expectedDeliveryDate\"\n                type=\"date\"\n                placeholder=\"选择预计交付日期\"\n                style=\"width:100%\">\n              </el-date-picker>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-row :gutter=\"20\">\n          <el-col :span=\"12\">\n            <el-form-item label=\"联系人\" prop=\"contactName\">\n              <el-input v-model=\"orderForm.contactName\" placeholder=\"请输入联系人\"></el-input>\n            </el-form-item>\n          </el-col>\n          \n          <el-col :span=\"12\">\n            <el-form-item label=\"联系电话\" prop=\"contactPhone\">\n              <el-input v-model=\"orderForm.contactPhone\" placeholder=\"请输入联系电话\"></el-input>\n            </el-form-item>\n          </el-col>\n        </el-row>\n        \n        <el-form item label=\"收货地址\" prop=\"address\">\n          <el-input v-model=\"orderForm.address\" placeholder=\"请输入收货地址\"></el-input>\n        </el-form>\n        \n        <el-form item label=\"备注\" prop=\"remark\">\n          <el-input v-model=\"orderForm.remark\" type=\"textarea\" placeholder=\"请输入备注信息\"></el-input>\n        </el-form>\n        \n        <!-- 订单明细 -->\n        <el-divider content-position=\"left\">订单明细</el-divider>\n        \n        <el-form item>\n          <el-button type=\"primary\" size=\"small\" @click=\"addOrderItem\">\n            <i class=\"el-icon-plus\"></i> 添加商品\n          </el-button>\n        </el-form>\n        \n        <el-table :data=\"orderForm.orderItems\" border style=\"width: 100%\">\n          <el-table-column label=\"序号\" type=\"index\" width=\"50\" align=\"center\"></el-table-column>\n          \n          <el-table-column label=\"商品\" width=\"280\">\n            <template slot-scope=\"scope\">\n              <el-select v-model=\"scope.row.productId\" placeholder=\"请选择商品\" style=\"width:100%\" @change=\"(val) => handleProductChange(val, scope.$index)\">\n                <el-option\n                  v-for=\"item in productOptions\"\n                  :key=\"item.id\"\n                  :label=\"item.productName\"\n                  :value=\"item.id\">\n                </el-option>\n              </el-select>\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"商品编码\" prop=\"productCode\" width=\"150\"></el-table-column>\n          \n          <el-table-column label=\"单位\" prop=\"unit\" width=\"80\"></el-table-column>\n          \n          <el-table-column label=\"单价(元)\" prop=\"unitPrice\" width=\"100\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.unitPrice | money }}\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"数量\" width=\"120\">\n            <template slot-scope=\"scope\">\n              <el-input-number v-model=\"scope.row.quantity\" :min=\"1\" size=\"mini\" @change=\"updateItemTotal(scope.$index)\"></el-input-number>\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"总价(元)\" prop=\"totalPrice\" width=\"120\">\n            <template slot-scope=\"scope\">\n              {{ scope.row.totalPrice | money }}\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"操作\" width=\"80\" align=\"center\">\n            <template slot-scope=\"scope\">\n              <el-button type=\"danger\" icon=\"el-icon-delete\" size=\"mini\" circle @click=\"removeOrderItem(scope.$index)\"></el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        \n        <div class=\"order-footer\">\n          <span class=\"order-total\">订单总金额: <strong>{{ orderTotalAmount | money }}</strong></span>\n        </div>\n        \n        <el-form item style=\"margin-top:20px;\">\n          <el-button type=\"primary\" @click=\"submitForm\">提交订单</el-button>\n          <el-button @click=\"resetForm\">重置</el-button>\n        </el-form>\n    </el-form>\n    </el-card>\n  </div>\n</template>\n\n<script>\nimport { getOrderDetail, createOrder, updateOrder, updateOrderStatus } from '@/api/order'\nimport { getOrderStatusList } from '@/api/orderStatus'\n\nexport default {\n  name: 'OrderCreate',\n  filters: {\n    money(val) {\n      if (!val) return '0.00'\n      return Number(val).toFixed(2)\n    }\n  },\n  data() {\n    return {\n      isCreating: false,\n      id: undefined,\n      submitLoading: false,\n      orderForm: {\n        id: undefined,\n        orderNo: '',\n        customerId: '',\n        totalAmount: 0,\n        status: 0,\n        address: '',\n        contactName: '',\n        contactPhone: '',\n        remark: '',\n        expectedDeliveryDate: '',\n        actualDeliveryDate: '',\n        orderItems: []\n      },\n      rules: {\n        customerId: [{ required: true, message: '请选择客户', trigger: 'change' }],\n        contactName: [{ required: true, message: '请输入联系人', trigger: 'blur' }],\n        contactPhone: [{ required: true, message: '请输入联系电话', trigger: 'blur' }],\n        address: [{ required: true, message: '请输入收货地址', trigger: 'blur' }],\n        expectedDeliveryDate: [{ required: true, message: '请选择预计交付日期', trigger: 'change' }]\n      },\n      customerOptions: [],\n      productOptions: [],\n      orderTotalAmount: 0,\n      orderStatusList: []\n    }\n  },\n  computed: {\n    title() {\n      return this.isCreating ? '创建订单' : `订单详情: ${this.orderForm.orderNo}`\n    },\n    canEdit() {\n      return this.isCreating || this.orderForm.status === 0\n    },\n    canChangeStatus() {\n      return !this.isCreating && this.orderForm.status < 4\n    },\n    nextStatusLabel() {\n      const statusMap = {\n        0: '确认订单',\n        1: '开始生产',\n        2: '发货',\n        3: '完成订单',\n        4: '',\n        5: ''\n      }\n      return statusMap[this.orderForm.status]\n    },\n    statusName() {\n      const statusMap = {\n        0: '待确认',\n        1: '已确认',\n        2: '生产中',\n        3: '已发货',\n        4: '已完成',\n        5: '已取消'\n      }\n      return statusMap[this.orderForm.status]\n    },\n    statusTag() {\n      const statusMap = {\n        0: 'info',\n        1: 'primary',\n        2: 'warning',\n        3: 'success',\n        4: 'success',\n        5: 'danger'\n      }\n      return statusMap[this.orderForm.status]\n    }\n  },\n  created() {\n    const id = this.$route.params.id\n    console.log('id = ', id)\n    const path = this.$route.path\n    // 判断是否是创建订单模式\n    this.isCreating = path.includes('create')\n    console.log('path = ', path)\n    if (!this.isCreating) {\n      console.log('订单详情')\n      // 非创建模式，需要获取订单详情\n      if (id && !isNaN(parseInt(id))) {\n        this.id = parseInt(id)\n        this.getOrderDetail()\n      } else {\n        // 参数无效，显示错误并返回\n        this.$message.error('无效的订单ID参数')\n        this.$router.push({ name: 'OrderList' })\n      }\n    } else {\n      console.log('创建订单')\n      // 创建订单模式，初始化一个空的订单项\n      this.handleAddItem()\n    }\n    this.loadCustomers()\n    this.loadProducts()\n    this.getOrderStatusList()\n  },\n  methods: {\n    goBack() {\n      this.$router.push({ name: 'OrderList' })\n    },\n    getOrderDetail() {\n      getOrderDetail(this.id).then(response => {\n        if (response.data) {\n          this.orderForm = response.data\n          // 如果没有明细项，添加一个空的\n          if (!this.orderForm.orderItems || this.orderForm.orderItems.length === 0) {\n            this.orderForm.orderItems = []\n            this.handleAddItem()\n          }\n        }\n      })\n    },\n    handleAddItem() {\n      this.orderForm.orderItems.push({\n        id: undefined,\n        orderId: this.orderForm.id,\n        productId: '',\n        productName: '',\n        productCode: '',\n        unit: '',\n        quantity: 1,\n        unitPrice: 0,\n        totalPrice: 0\n      })\n    },\n    handleRemoveItem(index) {\n      this.orderForm.orderItems.splice(index, 1)\n      if (this.orderForm.orderItems.length === 0) {\n        this.handleAddItem()\n      }\n    },\n    handleProductChange(productId, index) {\n      const product = this.productOptions.find(item => item.id === productId)\n      if (product) {\n        this.orderForm.orderItems[index].productName = product.productName\n        this.orderForm.orderItems[index].productCode = product.productCode\n        this.orderForm.orderItems[index].unit = product.unit\n        this.orderForm.orderItems[index].unitPrice = product.price\n        this.updateItemTotal(index)\n      }\n    },\n    updateItemTotal(index) {\n      const item = this.orderForm.orderItems[index]\n      if (item.quantity && item.unitPrice) {\n        item.totalPrice = (item.quantity * item.unitPrice).toFixed(2)\n      }\n    },\n    calculateRowTotal(row) {\n      if (row.quantity && row.unitPrice) {\n        return (row.quantity * row.unitPrice).toFixed(2)\n      }\n      return '0.00'\n    },\n    submitForm() {\n      this.$refs.orderForm.validate(async valid => {\n        if (valid) {\n          if (this.orderForm.orderItems.length === 0) {\n            this.$message.warning('请至少添加一个商品')\n            return\n          }\n\n          for (const item of this.orderForm.orderItems) {\n            if (!item.productId) {\n              this.$message.warning('请选择商品')\n              return\n            }\n          }\n          \n          this.orderForm.totalAmount = this.orderTotalAmount\n          \n          try {\n            const res = await this.$api.post('/api/orders', this.orderForm)\n            if (res.success) {\n              this.$message.success('订单创建成功')\n              this.$router.push('/order/list')\n            } else {\n              this.$message.error(res.message || '订单创建失败')\n            }\n          } catch (error) {\n            this.$message.error('订单提交失败')\n            console.error(error)\n          }\n        } else {\n          this.$message.warning('请填写完整信息')\n          return false\n            }\n      })\n    },\n    resetForm() {\n      this.$refs.orderForm.resetFields()\n      this.orderForm.orderItems = []\n    },\n    handleCustomerChange(customerId) {\n      const customer = this.customerOptions.find(item => item.id === customerId)\n      if (customer) {\n        this.orderForm.contactName = customer.contactName\n        this.orderForm.contactPhone = customer.contactPhone\n        this.orderForm.address = customer.address\n      }\n    },\n    addOrderItem() {\n      this.orderForm.orderItems.push({\n        productId: null,\n        productName: '',\n        productCode: '',\n        unit: '',\n        quantity: 1,\n        unitPrice: 0,\n        totalPrice: 0\n      })\n    },\n    removeOrderItem(index) {\n      this.orderForm.orderItems.splice(index, 1)\n    },\n    loadCustomers() {\n      this.$api.get('/api/customers').then(res => {\n        if (res.success) {\n          this.customerOptions = res.data\n        }\n      })\n    },\n    loadProducts() {\n      this.$api.get('/api/products').then(res => {\n        if (res.success) {\n          this.productOptions = res.data\n        }\n      })\n    },\n    handlePrint() {\n      window.print()\n    },\n    handleNextStatus() {\n      this.$confirm(`确认将订单状态更新为\"${this.nextStatusLabel}\"?`, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        const nextStatus = this.orderForm.status + 1\n        updateOrderStatus(this.id, nextStatus).then(() => {\n          this.$message.success('更新订单状态成功')\n          this.orderForm.status = nextStatus\n        })\n      }).catch(() => {})\n    },\n    handleCancel() {\n      this.$confirm('确认取消该订单?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        updateOrderStatus(this.id, 5).then(() => {\n          this.$message.success('订单已取消')\n          this.orderForm.status = 5\n        })\n      }).catch(() => {})\n    },\n    async getOrderStatusList() {\n      try {\n        const response = await getOrderStatusList()\n        this.orderStatusList = response.data\n      } catch (error) {\n        console.error('获取订单状态列表失败:', error)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.detail-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n.operation-group {\n  display: flex;\n  gap: 10px;\n}\n.order-status {\n  margin-bottom: 30px;\n}\n.order-footer {\n  margin-top: 20px;\n  text-align: right;\n  padding-right: 20px;\n}\n.order-total {\n  font-size: 16px;\n}\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n.order-total {\n  text-align: right;\n  margin-top: 20px;\n  padding-right: 20px;\n}\n.form-footer {\n  margin-top: 30px;\n  text-align: center;\n}\n@media print {\n  .detail-header, .form-footer, .el-table__expand-icon {\n    display: none;\n  }\n}\n</style> "]}]}