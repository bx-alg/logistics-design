{"remainingRequest":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??ref--5!/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/bx/logistics-design/frontend/src/views/production/productionPlanDetail.vue?vue&type=template&id=9e5e2342&scoped=true","dependencies":[{"path":"/Users/bx/logistics-design/frontend/src/views/production/productionPlanDetail.vue","mtime":1748582680183},{"path":"/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1747185535160},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1747185534147},{"path":"/Users/bx/logistics-design/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1747185535160},{"path":"/Users/bx/logistics-design/frontend/node_modules/vue-loader/lib/index.js","mtime":1747185534034}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}